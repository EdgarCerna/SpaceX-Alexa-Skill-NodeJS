"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _axios = _interopRequireDefault(require("axios"));

var _queryString = _interopRequireDefault(require("query-string"));

var SpaceX =
/*#__PURE__*/
function () {
  function SpaceX() {
    (0, _classCallCheck2.default)(this, SpaceX);
  }

  (0, _createClass2.default)(SpaceX, null, [{
    key: "makeRequest",
    value: function () {
      var _makeRequest = (0, _asyncToGenerator2.default)(
      /*#__PURE__*/
      _regenerator.default.mark(function _callee(route, query) {
        var settings,
            response,
            _args = arguments;
        return _regenerator.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                settings = _args.length > 2 && _args[2] !== undefined ? _args[2] : {};
                _context.prev = 1;
                _context.next = 4;
                return (0, _axios.default)({
                  method: settings.method || 'get',
                  baseURL: (settings.ssl ? 'https://' : 'http://') + (settings.baseURL || 'api.spacexdata.com') + '/' + (settings.version || 'v3'),
                  url: route + '?' + _queryString.default.stringify(query),
                  timeout: settings.timeout
                });

              case 4:
                response = _context.sent;
                return _context.abrupt("return", response.data);

              case 8:
                _context.prev = 8;
                _context.t0 = _context["catch"](1);

                if (!_context.t0.response) {
                  _context.next = 13;
                  break;
                }

                if (!(_context.t0.response.status === 400)) {
                  _context.next = 13;
                  break;
                }

                return _context.abrupt("return", undefined);

              case 13:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this, [[1, 8]]);
      }));

      function makeRequest(_x, _x2) {
        return _makeRequest.apply(this, arguments);
      }

      return makeRequest;
    }()
  }, {
    key: "getAllCapsules",
    value: function getAllCapsules(query, settings) {
      return SpaceX.makeRequest('/capsules', query, settings);
    }
  }, {
    key: "getCapsule",
    value: function getCapsule(id, query, settings) {
      return SpaceX.makeRequest('/capsules/' + id, query, settings);
    }
  }, {
    key: "getUpcomingCapsules",
    value: function getUpcomingCapsules(query, settings) {
      return SpaceX.makeRequest('/capsules/upcoming', query, settings);
    }
  }, {
    key: "getPastCapsules",
    value: function getPastCapsules(query, settings) {
      return SpaceX.makeRequest('/capsules/past', query, settings);
    }
  }, {
    key: "getAllCores",
    value: function getAllCores(query, settings) {
      return SpaceX.makeRequest('/cores', query, settings);
    }
  }, {
    key: "getCore",
    value: function getCore(id, query, settings) {
      return SpaceX.makeRequest('/cores/' + id, query, settings);
    }
  }, {
    key: "getUpcomingCores",
    value: function getUpcomingCores(query, settings) {
      return SpaceX.makeRequest('/cores/upcoming', query, settings);
    }
  }, {
    key: "getPastCores",
    value: function getPastCores(query, settings) {
      return SpaceX.makeRequest('/cores/past', query, settings);
    }
  }, {
    key: "getAllDragons",
    value: function getAllDragons(query, settings) {
      return SpaceX.makeRequest('/dragons', query, settings);
    }
  }, {
    key: "getDragon",
    value: function getDragon(id, query, settings) {
      return SpaceX.makeRequest('/dragons/' + id, query, settings);
    }
  }, {
    key: "getAllHistory",
    value: function getAllHistory(query, settings) {
      return SpaceX.makeRequest('/history', query, settings);
    }
  }, {
    key: "getHistory",
    value: function getHistory(id, query, settings) {
      return SpaceX.makeRequest('/history/' + id, query, settings);
    }
  }, {
    key: "info",
    value: function info(settings) {
      return SpaceX.makeRequest('/info', settings);
    }
  }, {
    key: "apiInfo",
    value: function apiInfo(settings) {
      return SpaceX.makeRequest('/', settings);
    }
  }, {
    key: "getAllLandingPads",
    value: function getAllLandingPads(query, settings) {
      return SpaceX.makeRequest('/landpads', query, settings);
    }
  }, {
    key: "getLandingPad",
    value: function getLandingPad(id, query, settings) {
      return SpaceX.makeRequest('/landpads/' + id, query, settings);
    }
  }, {
    key: "getAllLaunches",
    value: function getAllLaunches(query, settings) {
      return SpaceX.makeRequest('/launches', query, settings);
    }
  }, {
    key: "getLaunch",
    value: function getLaunch(id, query, settings) {
      return SpaceX.makeRequest('/launches' + id, query, settings);
    }
  }, {
    key: "getPastLaunches",
    value: function getPastLaunches(query, settings) {
      return SpaceX.makeRequest('/launches/past', query, settings);
    }
  }, {
    key: "getUpcomingLaunches",
    value: function getUpcomingLaunches(query, settings) {
      return SpaceX.makeRequest('/launches/upcoming', query, settings);
    }
  }, {
    key: "getLatestLaunch",
    value: function getLatestLaunch(settings) {
      return SpaceX.makeRequest('/launches/latest', settings);
    }
  }, {
    key: "getNextLaunch",
    value: function getNextLaunch(settings) {
      return SpaceX.makeRequest('/launches/next', settings);
    }
  }, {
    key: "getAllLaunchPads",
    value: function getAllLaunchPads(query, settings) {
      return SpaceX.makeRequest('/launchpads', query, settings);
    }
  }, {
    key: "getLaunchPad",
    value: function getLaunchPad(id, query, settings) {
      return SpaceX.makeRequest('/launchpads/' + id, query, settings);
    }
  }, {
    key: "getAllMissions",
    value: function getAllMissions(query, settings) {
      return SpaceX.makeRequest('/missions', query, settings);
    }
  }, {
    key: "getMission",
    value: function getMission(id, query, settings) {
      return SpaceX.makeRequest('/missions', query, settings);
    }
  }, {
    key: "getAllPayloads",
    value: function getAllPayloads(query, settings) {
      return SpaceX.makeRequest('/payloads', query, settings);
    }
  }, {
    key: "getPayload",
    value: function getPayload(id, query, settings) {
      return SpaceX.makeRequest('/payloads/' + id, query, settings);
    }
  }, {
    key: "getAllRockets",
    value: function getAllRockets(query, settings) {
      return SpaceX.makeRequest('/rockets', query, settings);
    }
  }, {
    key: "getRocket",
    value: function getRocket(id, query, settings) {
      return SpaceX.makeRequest('/rockets/' + id, query, settings);
    }
  }, {
    key: "getRoadster",
    value: function getRoadster(settings) {
      return SpaceX.makeRequest('/roadster', settings);
    }
  }, {
    key: "getAllShips",
    value: function getAllShips(query, settings) {
      return SpaceX.makeRequest('/ships', query, settings);
    }
  }, {
    key: "getShip",
    value: function getShip(id, query, settings) {
      return SpaceX.makeRequest('/ships/' + id, query, settings);
    }
  }]);
  return SpaceX;
}();

module.exports = SpaceX;